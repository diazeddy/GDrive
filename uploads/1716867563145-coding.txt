1. TSP
/*
Input:

List of cities: [A, B, C, D, E]
Distance matrix:
       A     B     C     D     E
A      0     5     9     2     8
B      5     0     6     3     4
C      9     6     0     7     2
D      2     3     7     0     1
E      8     4     2     1     0

Sequence of cities: [A, D, B, E, C, A]
Permutation of indices: [0, 3, 1, 4, 2, 0] -> 2 + 3 + 4 + 2 + 9 = 20
[0, 1, 2, 4, 3, 0] -> [A, B, C, E, D, A] -> 5 + 6 + 2 + 1 + 2 = 16
*/

const dist = [
    [0, 5, 9, 2, 8],
    [5, 0, 6, 3, 4],
    [9, 6, 0, 7, 2],
    [2, 3, 7, 0, 1],
    [8, 4, 2, 1, 0]
];

const numOfCities = dist.length;

function calculateMinimumDistance(currentCity, totalDistance, visits) {
    let minDistance = 1e8, minPath = null;
    if (visits.length === numOfCities) {
        // return [totalDistance + dist[currentCity][0], [...visits, 0]];
        return [totalDistance, visits];
    }
    for (let i = 0; i < numOfCities; i++) {
        if (!visits.includes(i) && dist[currentCity][i] > 0) {
            const [subDistance, subPath] = calculateMinimumDistance(i, totalDistance + dist[currentCity][i], [...visits, i]);
            if (minDistance > subDistance) {
                minDistance = subDistance;
                minPath = subPath;
            }
        }
    }
    return [minDistance, minPath];
}

const [minDistance, minPath] = calculateMinimumDistance(0, 0, [0]);
console.log({ minDistance, minPath });

2. React
import { useEffect, useMemo, useState } from 'react';
import './App.css';

const EXCHANGE_RATE = {
  USD: 1,
  EUR: 0.92,
  GBP: 0.79
};

const calcTargetPrice = (sourceCurrency, sourceAmount, targetCurrency) => {
  console.log({ sourceAmount, sourceCurrency, targetCurrency });
  const targetPrice = EXCHANGE_RATE[targetCurrency] / EXCHANGE_RATE[sourceCurrency] * Number(sourceAmount);
  return targetPrice;
};

const currencies = Object.keys(EXCHANGE_RATE);

function App() {
  const [priceA, setPriceA] = useState({
    currency: currencies[0],
    amount: '0'
  });
  const [priceB, setPriceB] = useState({
    currency: currencies[0],
    amount: '0'
  });

  const onCurrencyAChange = (currency) => {
    setPriceA({
      ...priceA,
      currency
    });
    setPriceB({
      ...priceB,
      amount: calcTargetPrice(currency, priceA.amount, priceB.currency)
    });
  };

  const onAmountAChange = (amount) => {
    setPriceA({
      ...priceA,
      amount
    });
    setPriceB({
      ...priceB,
      amount: calcTargetPrice(priceA.currency, amount, priceB.currency)
    });
  };

  const onCurrencyBChange = (currency) => {
    setPriceB({
      ...priceB,
      currency
    });
    setPriceA({
      ...priceA,
      amount: calcTargetPrice(currency, priceB.amount, priceA.currency)
    });
  };

  const onAmountBChange = (amount) => {
    setPriceB({
      ...priceB,
      amount
    });
    setPriceA({
      ...priceA,
      amount: calcTargetPrice(priceB.currency, amount, priceA.currency  )
    });
  };

  return (
    <div className="App">
      <div className='calculator-container flex gap-4'>
        <div className='input-group flex'>
          <select
            value={priceA.currency}
            className='border-black border-solid w-40 h-10'
            onChange={(event) => onCurrencyAChange(event.target.value)}
          >
            {currencies.map(currency => (
              <option value={currency}>{currency}</option>
            ))}
          </select>
          <input
            value={priceA.amount}
            className='border border-black border-solid w-40 h-10'
            onChange={(event) => onAmountAChange(event.target.value)}
          />
        </div>
        <div className='input-group flex'>
          <select
            value={priceB.currency}
            className='border-black border-solid w-40 h-10'
            onChange={(event) => onCurrencyBChange(event.target.value)}
          >
            {currencies.map(currency => (
              <option value={currency}>{currency}</option>
            ))}
          </select>
          <input
            value={priceB.amount}
            className='border border-black border-solid w-40 h-10'
            onChange={(event) => onAmountBChange(event.target.value)}
          />
        </div>
      </div>
    </div>
  );
}

export default App;
